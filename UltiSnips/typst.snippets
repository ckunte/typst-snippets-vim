snippet apdx "Appendix" b
#pagebreak(weak: true)
// appendix
#let appendix(body) = {
  set heading(numbering: "A.1"/*, supplement: [Appendices]*/)
  counter(heading).update(0)
  body
}
#show: appendix
// appendices hereon
endsnippet

snippet ref "Bibliography" b
#bibliography(title: "References", "${1:filename_incl_path}.bib")
endsnippet

snippet bib "Bibliography entry" b
@book{${1:key},
  author  = "${2:author}",
  title   = "${3:title}",
  edition = "{${4:document number and revision}}",
  date    = "${5:year and month in yyyy-mm}",
},
endsnippet

snippet cod "Insert code file" b
#let ${1:subj} = read("${2:filepath}${1:subj}.py")
#{linebreak();raw(${1:subj}, lang: "python")}
endsnippet

snippet fig "Figure" b
#figure(
  image("${1:filename_incl_path}", width: 100%),
    caption: [${2:Description}]
) <${3:label}>
endsnippet

snippet fl "File" b
#include "${1:filename_incl_path}"
endsnippet

snippet hd "Set heading number format hereon" b
#set heading(numbering: "1.1")
endsnippet

snippet note "Note" b
#import "${1:template_incl_path}": note
#show note.with(
  title: [${2:title}],
  author: "${3:author}",
  date: [${4:date}],
)
// content hereon
endsnippet

snippet pb "Page break" b
#pagebreak(weak: true)
endsnippet

snippet tbl "Table" b
#figure(
  table(
    columns: (auto, 1fr),
    inset: 10pt,
    align: horizon,
    [label1], [label2],
    [Full spectrum], [0.358],
    [Narrow band], [0.343],
  ),
  caption: [${1:Description}],
) <${2:label}>
/*
table options:
  align: https://typst.app/docs/reference/layout/alignment/
  inset: https://typst.app/docs/reference/model/table/#parameters-inset 
*/
endsnippet

snippet letter "Letter" b
#import "letter-template.typ": letter
#show: letter.with(
  sender: [
    ${1:name_and_address}  
  ],
  recipient: [
    ${2:name_and_address}		  
  ],
  date: [#datetime.today().display("[month repr:long] [day], [year]")],
  subject: [${3:subject}],
  name: [],			  
)
// letter content hereon
${4:letter_content_hereon}
endsnippet 

snippet ltmpl "Letter template" b
// ckunte's custom letter template -- 2024
// This function gets your whole document as its `body`
// and formats it as a simple letter.
#let letter(
  // The letter's sender, which is display at the top of the page.
  sender: none,

  // The letter's recipient, which is displayed close to the top.
  recipient: none,

  // The date, displayed to the right.
  date: none,

  // The subject line.
  subject: none,

  // The name with which the letter closes.
  name: none,

  // The letter's content.
  body
) = {
  // Configure page and text properties.
  set page(
    paper: "a5",
    margin: (top: 15mm), 
    numbering: "1",
    )
  set text(
    font: "erewhon", // options: erewhon, Courier Prime, etc
    size: 10pt,
    top-edge: "cap-height", 
    bottom-edge: "baseline",
    number-type: "old-style",
    // size: 10pt // 11pt is default
    )  
  // Set paragraph
  set par(justify: true)

  // Display sender at top of page. If there's no sender
  // add some hidden text to keep the same spacing.
  align(center, {
    text(9pt, if sender == none {
      hide("a")
    } else {
      sender
    })
  })

  v(10mm)

  // Display date. If there's no date add some hidden
  // text to keep the same spacing.
  align(right, if date != none {
    date
  } else {
    hide("a")
  })

  v(5mm)

  // Display recipient.
  recipient

  v(5mm)

  // Add the subject line, if any.
  if subject != none {
    pad(right: 10%, strong(subject))
  }

  // Add body and name.
  body
  v(5mm)
  name
}
endsnippet

snippet ntmpl "Note template" b
// technical note -- a typst template
#let note(
  title: [Note title],
  author: "Author",
  date: none,
  body,
) = {
  // page properties
  set page(
    paper: "a4",
    margin: (x: 1.25in, y: 1.25in),
    numbering: "1",
  )

  // Set document metadata.
  set document(title: title, author: author)

  // text characteristics
  set text(
    font: "Arial",
    // top-edge: "cap-height",
    // bottom-edge: "baseline",
    number-type: "old-style",
    // size: 10pt // default: 11pt,
  )

  // link properties
  show cite: set text(fill: maroon)
  show link: set text(fill: rgb(0, 0, 255))
  show link: underline
  show "tbc": set text(fill: red)
  show "tbd": set text(fill: red)

  // small caps where supported by font
  let sc(content) = text(features: ("c2sc",))[#content]
  show regex("[A-Z]{2,}"): match => {
    sc(match)
  }

  // text characteristics for code
  show raw: set text(size: 8pt)

  // paragraph properties
  set par(
    leading: 0.65em,
    first-line-indent: 12pt,
    justify: true,
  )
  show par: set block(spacing: 0.65em)

  // configure equation numbering and spacing
  set math.equation(numbering: "(1)")
  show math.equation: set block(spacing: 0.65em)
  // Configure appearance of equation references
  show ref: it => {
    if it.element != none and it.element.func() == math.equation {
      // Override equation references.
      link(it.element.location(), numbering(
        it.element.numbering,
        ..counter(math.equation).at(it.element.location())
      ))
    } else {
      // Other references as usual.
      it
    }
  }

  // caption for table position and style
  show figure.where(
    kind: table
  ): set figure.caption(position: top)

  // emphasise caption
  show figure.caption: emph

  // emphasise first table row (proxy for header)
  show table.cell.where(y: 0): emph

  // first (title) page
  page(align(center)[ // center + horizon (to vertically center)
    #v(4em)
    #text(2em)[#title]
    #if (author != none) {
      v(2em, weak: true)
      text(1.2em, author)
    }
    #if (date != none) {
      v(2em, weak: true)
      text(1.2em, date)
    }
  ])
  // show content
  body
}
endsnippet